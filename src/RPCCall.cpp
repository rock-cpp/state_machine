#include "RPCCall.hpp"

namespace state_machine 
{

bool RPCCall::addArgument(std::string argName, void* data)
{
    RTT::types::TypekitRepository::getTransports();
    RTT::types::TypeInfoRepository::shared_ptr ti = RTT::types::TypeInfoRepository::Instance();
    RTT::types::TypeInfo* type = ti->type(argName);
    if (! type)
    {
        std::cerr << "cannot find " << argName << " in the type info repository" << std::endl;
        return false;
    }

    orogen_transports::TypelibMarshallerBase* transport =
    dynamic_cast<orogen_transports::TypelibMarshallerBase*>(type->getProtocol(orogen_transports::TYPELIB_MARSHALLER_ID));
    if (! transport)
    {
        log(RTT::Error) << "cannot report ports of type " << type->getTypeName() << " as no typekit generated by orogen defines it" << RTT::endlog();
        return false;
    }
    argTypeNames.push_back(argName);
    args.push_back(std::vector<u_int8_t>());
    orogen_transports::TypelibMarshallerBase::Handle* handle =  transport->createSample();
    transport->setOrocosSample(handle, data);
    transport->marshal(args[args.size()-1], handle);
    transport->refreshTypelibSample(handle);
    return true;
}


bool RPCCall::getArgument(int i, void* data)
{
    RTT::types::TypekitRepository::getTransports();
    RTT::types::TypeInfoRepository::shared_ptr ti = RTT::types::TypeInfoRepository::Instance();
    RTT::types::TypeInfo* type = ti->type(argTypeNames[i]);
    if (! type)
    {
        std::cerr << "cannot find " << argTypeNames[i] << " in the type info repository" << std::endl;
        return false;
    }

    orogen_transports::TypelibMarshallerBase* transport =
    dynamic_cast<orogen_transports::TypelibMarshallerBase*>(type->getProtocol(orogen_transports::TYPELIB_MARSHALLER_ID));
    if (! transport)
    {
        log(RTT::Error) << "cannot report ports of type " << type->getTypeName() << " as no typekit generated by orogen defines it" << RTT::endlog();
        return false;
    }
    orogen_transports::TypelibMarshallerBase::Handle* handle =  transport->createSample();
    transport->setOrocosSample(handle, data);
    transport->unmarshal(args[i], handle);
    transport->refreshOrocosSample(handle);
    return true;
}

}